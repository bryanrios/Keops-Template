// Generated by CoffeeScript 1.10.0
(function() {
  var DataSource, Record;

  DataSource = (function() {
    function DataSource(scope) {
      this.scope = scope;
      this.recordCount = null;
      this.loading = false;
      this.pageIndex = 0;
      this.pageLimit = 100;
      this.offset = 0;
      this.offsetLimit = 0;
      this.requestInterval = 300;
      this.pendingRequest = null;
    }

    DataSource.prototype.findById = function(id) {
      var i, len, rec, ref;
      ref = this.scope.records;
      for (i = 0, len = ref.length; i < len; i++) {
        rec = ref[i];
        if (rec.id === id) {
          return rec;
        }
      }
    };

    DataSource.prototype.hasKey = function(id) {
      var i, len, rec, ref, results;
      ref = this.scope.records;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        rec = ref[i];
        if (rec.id === id) {
          results.push(true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    DataSource.prototype.getIndex = function(obj) {
      var rec;
      rec = this.findById(obj.id);
      return this.scope.records.indexOf(rec);
    };

    DataSource.prototype.search = function(params, page) {
      if (this.pendingRequest) {
        clearTimeout(this.pendingRequest);
      }
      this.pendingRequest = true;
      this.loading = true;
      page = page || 1;
      this.pageIndex = page;
      params = {
        count: true,
        page: page,
        params: params
      };
      return this.pendingRequest = setTimeout((function(_this) {
        return function() {
          return _this.scope.model.search(params, {
            count: true
          }).done(function(res) {
            if (_this.pageIndex > 1) {
              _this.offset = (_this.pageIndex - 1) * _this.pageLimit + 1;
            } else {
              _this.offset = 1;
            }
            return _this.scope.$apply(function() {
              if (res.result.count != null) {
                _this.recordCount = res.result.count;
              }
              _this.scope.records = res.result.data;
              if (_this.pageIndex === 1) {
                return _this.offsetLimit = _this.scope.records.length;
              } else {
                return _this.offsetLimit = _this.offset + _this.scope.records.length - 1;
              }
            });
          }).always(function() {
            _this.pendingRequest = false;
            return _this.scope.$apply(function() {
              return _this.loading = false;
            });
          });
        };
      })(this), this.requestInterval);
    };

    DataSource.prototype.goto = function(index) {
      return this.scope.moveBy(index - this.scope.recordIndex);
    };

    DataSource.prototype.moveBy = function(index) {
      var newIndex;
      newIndex = this.scope.recordIndex + index - 1;
      if (newIndex > -1 && newIndex < this.scope.records.length) {
        this.scope.recordIndex = newIndex + 1;
        return this.scope.location.search('id', this.scope.records[newIndex].id);
      }
    };

    DataSource.prototype.get = function(id) {
      if (this.pendingRequest) {
        clearTimeout(this.pendingRequest);
      }
      this.loading = true;
      return this.pendingRequest = setTimeout((function(_this) {
        return function() {
          return _this.scope.model.get(id).done(function(res) {
            return _this.scope.$apply(function() {
              _this.scope.record = res.result.data[0];
              return _this.scope.recordId = _this.scope.record.id;
            });
          }).always(function() {
            return _this.loading = false;
          });
        };
      })(this), this.requestInterval);
    };

    DataSource.prototype.next = function() {
      return this.moveBy(1);
    };

    DataSource.prototype.prior = function() {
      return this.moveBy(-1);
    };

    DataSource.prototype.nextPage = function() {
      var p;
      p = this.recordCount / this.pageLimit;
      if (Math.floor(p)) {
        p++;
      }
      if (p > this.pageIndex + 1) {
        return this.scope.location.search('page', this.pageIndex + 1);
      }
    };

    DataSource.prototype.prevPage = function() {
      if (this.pageIndex > 1) {
        return this.scope.location.search('page', this.pageIndex - 1);
      }
    };

    DataSource.prototype.setRecordIndex = function(index) {
      console.log(index);
      return this.scope.recordIndex = index + 1;
    };

    return DataSource;

  })();

  Record = (function() {
    function Record(res1) {
      this.res = res1;
      this.data = this.res.data;
    }

    return Record;

  })();

  Katrid.Data = {
    DataSource: DataSource,
    Record: Record
  };

}).call(this);

//# sourceMappingURL=data.js.map
