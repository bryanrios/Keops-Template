(function(){"use strict";angular.module("ui.validate",[]).directive("uiValidate",["$$uiValidateApplyWatch","$$uiValidateApplyWatchCollection",function($$uiValidateApplyWatch,$$uiValidateApplyWatchCollection){return{restrict:"A",require:"ngModel",link:function(scope,elm,attrs,ctrl){var validateFn,validateExpr=scope.$eval(attrs.uiValidate);if(!validateExpr){return}if(angular.isString(validateExpr)){validateExpr={validator:validateExpr}}angular.forEach(validateExpr,function(exprssn,key){validateFn=function(modelValue,viewValue){var expression=scope.$eval(exprssn,{$value:modelValue,$modelValue:modelValue,$viewValue:viewValue,$name:ctrl.$name});if(angular.isObject(expression)&&angular.isFunction(expression.then)){expression.then(function(){ctrl.$setValidity(key,true)},function(){ctrl.$setValidity(key,false)});return true}else{return!!expression}};ctrl.$validators[key]=validateFn});if(attrs.uiValidateWatch){$$uiValidateApplyWatch(scope,ctrl,scope.$eval(attrs.uiValidateWatch),attrs.uiValidateWatchObjectEquality)}if(attrs.uiValidateWatchCollection){$$uiValidateApplyWatchCollection(scope,ctrl,scope.$eval(attrs.uiValidateWatchCollection))}}}}]).directive("uiValidateAsync",["$$uiValidateApplyWatch","$$uiValidateApplyWatchCollection","$timeout","$q",function($$uiValidateApplyWatch,$$uiValidateApplyWatchCollection,$timeout,$q){return{restrict:"A",require:"ngModel",link:function(scope,elm,attrs,ctrl){var validateFn,validateExpr=scope.$eval(attrs.uiValidateAsync);if(!validateExpr){return}if(angular.isString(validateExpr)){validateExpr={validatorAsync:validateExpr}}angular.forEach(validateExpr,function(exprssn,key){validateFn=function(modelValue,viewValue){var expression=scope.$eval(exprssn,{$value:modelValue,$modelValue:modelValue,$viewValue:viewValue,$name:ctrl.$name});if(angular.isObject(expression)&&angular.isFunction(expression.then)){return expression}else{return $q(function(resolve,reject){setTimeout(function(){if(expression){resolve()}else{reject()}},0)})}};ctrl.$asyncValidators[key]=validateFn});if(attrs.uiValidateWatch){$$uiValidateApplyWatch(scope,ctrl,scope.$eval(attrs.uiValidateWatch),attrs.uiValidateWatchObjectEquality)}if(attrs.uiValidateWatchCollection){$$uiValidateApplyWatchCollection(scope,ctrl,scope.$eval(attrs.uiValidateWatchCollection))}}}}]).service("$$uiValidateApplyWatch",function(){return function(scope,ctrl,watch,objectEquality){var watchCallback=function(){ctrl.$validate()};if(angular.isString(watch)){scope.$watch(watch,watchCallback,objectEquality)}else if(angular.isArray(watch)){angular.forEach(watch,function(expression){scope.$watch(expression,watchCallback,objectEquality)})}else if(angular.isObject(watch)){angular.forEach(watch,function(expression){if(angular.isString(expression)){scope.$watch(expression,watchCallback,objectEquality)}if(angular.isArray(expression)){angular.forEach(expression,function(intExpression){scope.$watch(intExpression,watchCallback,objectEquality)})}})}}}).service("$$uiValidateApplyWatchCollection",function(){return function(scope,ctrl,watch){var watchCallback=function(){ctrl.$validate()};if(angular.isString(watch)){scope.$watchCollection(watch,watchCallback)}else if(angular.isArray(watch)){angular.forEach(watch,function(expression){scope.$watchCollection(expression,watchCallback)})}else if(angular.isObject(watch)){angular.forEach(watch,function(expression){if(angular.isString(expression)){scope.$watchCollection(expression,watchCallback)}if(angular.isArray(expression)){angular.forEach(expression,function(intExpression){scope.$watchCollection(intExpression,watchCallback)})}})}}})})();